var watch = require('watch-glob')
var path = require('path')
var fs = require('fs')
console.log('WATCHING i18n json files', path.join(__dirname, '../../src/app/resources/strings/i18n/**/*.json'))
watch(path.join('src/app/resources/strings/i18n/**/*.json'), { callbackArg: 'relative' }, (file) => {
  try {
    console.log('generate files', file)
    const splitFile = file.split(path.sep)
    const fileName = splitFile[splitFile.length - 1]
    const jsonContent = fs.readFileSync(file, {encoding: 'utf8'})
    fs.writeFileSync(file.replace(fileName, 'index.ts'), renderJSON(fileName, jsonContent))
    rewriteReducer()
  } catch (e) {
    console.error('Could not re-render', file)
  }

})

function rewriteReducer () {
  const reducer = path.join(__dirname, '../../src/app/redux/modules/i18n/i18nReducer.generated.ts')
  const directories = getDirectories(path.join(__dirname, '../../src/app/resources/strings/i18n/'))
  fs.writeFileSync(reducer,
`// DO NOT EDIT THIS FILE
// This file is auto generated, and overwritten whenever something changes in
// src/resources/i18n
import en, {en as languageTemplate} from '../../../resources/strings/i18n/en'
${directories.filter(d => d !== 'en').map(d => `import ${d} from '../../../resources/strings/i18n/${d}'\n`)}
import makeReducer from '../BaseReducer'

export const availableLanguages = ${JSON.stringify(directories).replace(/"/g, "'").replace(/,/g, ', ')}
const languages: {[l: string]: languageTemplate} = {
  ${directories.join(',\n  ')}
}
/** Type Definitions */
export interface Ii18nState {
  strings: languageTemplate,
  selectedLanguage: string
}
let locale: string
if (typeof(Storage) !== 'undefined') {
  locale = localStorage.getItem('locale')
}

/** Initial State */
const initialState: Ii18nState = {
  strings: locale ? languages[locale] : en,
  selectedLanguage: 'en'
}

/** Actions
 * Accepts a payload, and the current reducer substate
 * must return a new version of the state.
 */
export enum Languages {
  ${directories.join(',\n  ')}
}

const actions = {
  changeLanguage: (payload: string, state?: Ii18nState): Ii18nState => {
    if (typeof(Storage) !== 'undefined') {
      localStorage.setItem('locale', payload)
    }
    return {
      strings: languages[payload],
      selectedLanguage: payload
    }
  }
}

const asyncActions = {
}
const reducer = makeReducer(initialState, actions, asyncActions)('i18n')
export default reducer
// For hot reloading
if (process.env.BROWSER) {
  setTimeout(() => {
    const store = require('../../../../client.tsx').getStore()
    let locale: string
    if (typeof(Storage) !== 'undefined') {
      locale = localStorage.getItem('locale')
    }
    store.dispatch(reducer.changeLanguage(locale))
  }, 20)
}
`)
}

function renderJSON (fileName, content) {
  const language = fileName.replace('.json', '')
return `/* tslint:disable */
/**
 * This is an auto generated file. To make changes, edit the accompanying json file
 */
${language !== 'en' ? "import {en} from '../en' // English is the template language": ''}
const l${language === 'en' ? '': ': en'} = ${content}
export default l
${language === 'en' ? `export type ${fileName.replace('.json', '')} = typeof l` : ''}
`
}

function getDirectories(srcpath) {
  return fs.readdirSync(srcpath).filter(function(file) {
    return fs.statSync(path.join(srcpath, file)).isDirectory();
  });
}
