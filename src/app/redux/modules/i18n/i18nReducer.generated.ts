// DO NOT EDIT THIS FILE
// This file is auto generated, and overwritten whenever something changes in
// src/resources/i18n
import en, {en as languageTemplate} from '../../../resources/strings/i18n/en'
import sp from '../../../resources/strings/i18n/sp'

import makeReducer from '../BaseReducer'

export const availableLanguages = ['en', 'sp']
const languages: {[l: string]: languageTemplate} = {
  en,
  sp
}
/** Type Definitions */
export interface Ii18nState {
  strings: languageTemplate,
  selectedLanguage: string
}
let locale: string
if (typeof(Storage) !== 'undefined') {
  locale = localStorage.getItem('locale')
}

/** Initial State */
const initialState: Ii18nState = {
  strings: locale ? languages[locale] : en,
  selectedLanguage: 'en'
}

/** Actions
 * Accepts a payload, and the current reducer substate
 * must return a new version of the state.
 */
export enum Languages {
  en,
  sp
}

const actions = {
  changeLanguage: (payload: string, state?: Ii18nState): Ii18nState => {
    if (typeof(Storage) !== 'undefined') {
      localStorage.setItem('locale', payload)
    }
    return {
      strings: languages[payload],
      selectedLanguage: payload
    }
  }
}

const asyncActions = {
}
const reducer = makeReducer(initialState, actions, asyncActions)('i18n')
export default reducer
// For hot reloading
if (process.env.BROWSER) {
  setTimeout(() => {
    const store = require('../../../../client.tsx').getStore()
    let locale: string
    if (typeof(Storage) !== 'undefined') {
      locale = localStorage.getItem('locale')
    }
    store.dispatch(reducer.changeLanguage(locale))
  }, 20)
}
